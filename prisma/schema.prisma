// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output = "./kysely"
  fileName = "types.ts"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model Greeting {
  id              Int @id @default(autoincrement())
  url             String
  text            String?
  translation     String?
  usage           String?
  parentId        Int?
  parentGreeting  Greeting? @relation("parent", fields: [parentId], references: [id])
  responses       Greeting[] @relation(name : "parent")
  entryId         Int
  entry           Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model Media {
  id              Int @id @default(autoincrement())
  url             String
  title           String?
  caption         String?
  entryId         Int
  entry           Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model Website {
  id              Int @id @default(autoincrement())
  url             String
  title           String?
  entryId         Int
  entry           Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model Change {
  id              Int @id @default(autoincrement())
  createdAt       DateTime
  description     String?
  entryId         Int
  entry           Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model Relation {
  id              Int @id @default(autoincrement())
  description     String?
  relatedToId     Int
  relatedTo       Entry @relation("related_to", fields: [relatedToId], references: [id])
  relatedFromId   Int
  relatedFrom     Entry @relation("related_from", fields: [relatedFromId], references: [id])
}

model Point {
	id              Int @id @default(autoincrement())
  geometry        Unsupported("geometry(Point, 4326)")?
  osmType         String?
  osmId           String?
  entryId         Int @unique
  entry           Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model Line {
	id              Int @id @default(autoincrement())
  geometry        Unsupported("geometry(MultiLineString, 4326)")?
  entryId         Int @unique
  entry           Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model Polygon {
	id              Int @id @default(autoincrement())
  geometry        Unsupported("geometry(MultiPolygon, 4326)")?
  entryId         Int @unique
  entry           Entry @relation(fields: [entryId], references: [id])
}

model Entry {
	id              Int @id @default(autoincrement())
	name            String
  slug            String? @unique
  color           String?
  sources         String?
  pronunciation   String?
  category        String?
  published       Boolean @default(false)
  media           Media[]
  websites        Website[]
  changelog       Change[]
  greetings       Greeting[]
  relatedTo       Relation[] @relation(name: "related_from")
  relatedFrom     Relation[] @relation(name: "related_to")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  point           Point?
  line            Line?
  polygon         Polygon?

  itemPerms       ItemPermission[]
  issues          Issue[]

  @@index([slug])
}

model PermissionAction {
  id              Int @id @default(autoincrement())
  name            String
  appliedToGlobal GlobalPermission[]
  appliedToItem   ItemPermission[]
}

model PermissionEntity {
  id              Int @id @default(autoincrement())
  name            String
  appliedToGlobal GlobalPermission[]
  appliedToItem   ItemPermission[]
}

model GlobalPermission {
  id              Int @id @default(autoincrement())
  columnNames     String[]
  actionId        Int
  action          PermissionAction @relation(fields: [actionId], references: [id])
  entityId        Int
  entity          PermissionEntity @relation(fields: [entityId], references: [id])
  userId          Int
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ItemPermission {
  id              Int @id @default(autoincrement())
  columnNames     String[]
  entryId         Int
  entry           Entry @relation(fields: [entryId], references: [id])
  actionId        Int
  action          PermissionAction @relation(fields: [actionId], references: [id])
  entityId        Int
  entity          PermissionEntity @relation(fields: [entityId], references: [id])
  userId          Int
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
	id                   Int @id @default(autoincrement())
  createdAt            DateTime  @default(now())
	email                String @unique
  password             String
	name                 String?
  permissions_global   GlobalPermission[]
  permissions_items    ItemPermission[]
  permissions          String[] @default(["api", "profile"])
  organization         String?
  verification_key     String? @default(uuid())
  email_verified       Boolean @default(false)
  agreed_treaty        Boolean @default(false)
  api_key              String? @default(dbgenerated("nanoid()")) @db.VarChar(22)

  issueAuthor       Issue[]
  issueUser         UsersOnIssues[]
  comments          IssueComment[]

  @@index([email])
}

model IssueMedia {
	id               Int @id @default(autoincrement())
  url              String
  issueCommentId   Int
  issueComment     IssueComment @relation(fields: [issueCommentId], references: [id], onDelete: Cascade)
}

model IssueComment {
	id              Int @id @default(autoincrement())
  comment         String
  media           IssueMedia[]
  issueId         Int
  issue           Issue @relation(fields: [issueId], references: [id])
  authorId        Int
  author          User @relation(fields: [authorId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model IssueCategory {
	id              Int @id @default(autoincrement())
	name            String @unique
  color           String
  posts           CategoriesOnIssues[]

  @@index([name])
}

model CategoriesOnIssues {
	id              Int @id @default(autoincrement())
  issueId         Int
  issue           Issue @relation(fields: [issueId], references: [id])
  categoryId      Int
  category        IssueCategory @relation(fields: [categoryId], references: [id])

  @@index([issueId, categoryId])
}

model UsersOnIssues {
	id              Int @id @default(autoincrement())
  issueId         Int
  issue           Issue @relation(fields: [issueId], references: [id])
  userId          Int
  user            User @relation(fields: [userId], references: [id])

  @@index([issueId, userId])
}

model Issue {
	id              Int @id @default(autoincrement())
	name            String
  open            Boolean @default(true)
  categories      CategoriesOnIssues[]
  users           UsersOnIssues[]
  comments        IssueComment[]
  createdAt       DateTime  @default(now())
  entryId         Int?
  entry           Entry? @relation(fields: [entryId], references: [id])
  authorId        Int?
  author          User? @relation(fields: [authorId], references: [id])
}
